using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Threading;
using System.Windows.Forms;
using practice_exercises.Project_Euler.Helpers;
using practice_exercises.Project_Euler.Models.Miscellaneous;

namespace practice_exercises.Project_Euler.Solutions.C_Sharp
{
    public static class Solutions
    {
        // If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
        // Find the sum of all the multiples of 3 or 5 below 1000.
        // list all natural numbers below 1000
        public static dynamic SolveEuler1()
        {
            List<int> integersBelow1000 = new List<int>();
            for (int i = 0; i < 1000; i++)
            {
                if (i % 3 == 0 || i % 5 == 0)
                {
                    integersBelow1000.Add(i);
                }
            }

            // find the sum
            int sum = integersBelow1000.Sum(x => x);
            return sum;
        }

        // Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
        // 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        // By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
        public static dynamic SolveEuler2()
        {
            List<int> FibonacciNumbers = new List<int>();
            FibonacciNumbers.Add(1);
            FibonacciNumbers.Add(2);

            while (FibonacciNumbers.TrueForAll(x => x <= 4000000))
            {
                var fib1 = FibonacciNumbers[FibonacciNumbers.Count - 1];
                var fib2 = FibonacciNumbers[FibonacciNumbers.Count - 2];
                FibonacciNumbers.Add(fib1 + fib2);
            }

            int sum = FibonacciNumbers.Where(x => x % 2 == 0).Sum(x => x);

            return sum.ToString();
        }

        // The prime factors of 13195 are 5, 7, 13 and 29.
        // What is the largest prime factor of the number 600851475143 ?
        public static dynamic SolveEuler3()
        {
            long n = 600851475143;
            long biggestPrimeFactor = 1;
            for (long i = biggestPrimeFactor; i <= Math.Sqrt(n); i += 2)
            {
                if (LongHelper.checkIsPrimeViaTrialDivision(i) && n % i == 0)
                {
                    biggestPrimeFactor = i;
                }
            }

            return biggestPrimeFactor.ToString();
        }

        // A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
        // Find the largest palindrome made from the product of two 3-digit numbers.
        public static dynamic SolveEuler4()
        {
            int largestThreeDigitPalindrome = 0;

            for (int i = 100; i <= 999; i++)
            {
                for (int j = 100; j <= 999; j++)
                {
                    if (StringHelper.IsPalindromic((i * j).ToString())
                        && (i * j) > largestThreeDigitPalindrome)
                    {
                        largestThreeDigitPalindrome = i * j;
                    }
                }
            }

            return largestThreeDigitPalindrome.ToString();
        }

        //2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
        //What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
        public static dynamic SolveEuler5()
        {
            List<int> initialSet = Enumerable.Range(2, 20).ToList();
            List<Power> biggestPrimeFactors = new List<Power>();

            long result = 1;

            // i is a number in the initial set
            foreach (int i in initialSet)
            {
                // the last two parameters are seeds for the pollard's rho algorithm
                List<Power> primeFactorsOfI = LongHelper.ExpressPrimeFactorsAsPowers(
                    LongHelper.GetPrimeFactorization(i));

                foreach (var factor in primeFactorsOfI)
                {
                    if (biggestPrimeFactors.Any(x => x.Base == factor.Base) == false)
                    {
                        biggestPrimeFactors.Add(factor);
                    }
                    else
                    {
                        Power oldFactor = biggestPrimeFactors.Select(x => x).Where(x => x.Base == factor.Base).Single();

                        if (oldFactor.Exponent < factor.Exponent)
                        {
                            biggestPrimeFactors.Remove(oldFactor);
                            biggestPrimeFactors.Add(factor);
                        }
                    }
                }
            }

            foreach (var biggestPrimeFactor in biggestPrimeFactors)
            {
                result *= (int)Math.Pow(biggestPrimeFactor.Base, biggestPrimeFactor.Exponent);
            }

            return result.ToString();
        }

        // The sum of the squares of the first ten natural numbers is,
        // 1^2 + 2^2 + ... + 10^2 = 385
        // The square of the sum of the first ten natural numbers is,
        // (1 + 2 + ... + 10)2 = 552 = 3025
        // Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
        // Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
        public static dynamic SolveEuler6()
        {
            List<int> series = Enumerable.Range(1, 100).ToList();
            long sumOfSquares = 0;
            long squareOfSums = 0;

            foreach (int x in series)
            {
                sumOfSquares += (int)Math.Pow(x, 2);
            }

            long sums = 0;
            foreach (int x in series)
            {
                sums += x;
            }

            squareOfSums = (int)Math.Pow(sums, 2);

            return Math.Abs(sumOfSquares - squareOfSums).ToString();
        }

        // What is the 10 001st prime number?
        public static dynamic SolveEuler7()
        {
            List<long> primeNumbers = LongHelper.getPrimeNumbersTo(10000);
            return primeNumbers.Last().ToString();
        }

        // The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
        //  73167176531330624919225119674426574742355349194934
        //  96983520312774506326239578318016984801869478851843
        //  85861560789112949495459501737958331952853208805511
        //  12540698747158523863050715693290963295227443043557
        //  66896648950445244523161731856403098711121722383113
        //  62229893423380308135336276614282806444486645238749
        //  30358907296290491560440772390713810515859307960866
        //  70172427121883998797908792274921901699720888093776
        //  65727333001053367881220235421809751254540594752243
        //  52584907711670556013604839586446706324415722155397
        //  53697817977846174064955149290862569321978468622482
        //  83972241375657056057490261407972968652414535100474
        //  82166370484403199890008895243450658541227588666881
        //  16427171479924442928230863465674813919123162824586
        //  17866458359124566529476545682848912883142607690042
        //  24219022671055626321111109370544217506941658960408
        //  07198403850962455444362981230987879927244284909188
        //  84580156166097919133875499200524063689912560717606
        //  05886116467109405077541002256983155200055935729725
        //  71636269561882670428252483600823257530420752963450
        // Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
        public static dynamic SolveEuler8()
        {
            var numberString = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";

            long biggestProduct = 0;

            for (int stringStartingIndex = 0; stringStartingIndex < numberString.Length - 13; stringStartingIndex++)
            {
                var substring = numberString.Substring(stringStartingIndex, 13);

                long product = 1;

                for (int substringIndex = 0; substringIndex < 13; substringIndex++)
                {
                    product *= int.Parse(substring.ElementAt(substringIndex).ToString());
                }

                if (product > biggestProduct)
                {
                    biggestProduct = product;
                }
            }

            return biggestProduct.ToString();
        }

        // A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
        // a^2 + b^2 = c^2
        // For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
        // There exists exactly one Pythagorean triplet for which a + b + c = 1000.
        // Find the product abc.
        public static dynamic SolveEuler9()
        {
            int initialA = 1;
            int initialB = 1;

            string answer = "";

            for (int a = initialA; a < 1000; a++)
            {
                for (int b = initialB; (a + b) < 1000; b++)
                {
                    double c = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));
                    if (c % 1 == 0 &&
                        c > b &&
                        c > a &&
                        a + b + c == 1000)
                    {
                        answer = (a * b * c).ToString();
                        return answer;
                    }
                }
            }

            return answer;
        }

        // Find the sum of all the primes below two million.
        public static dynamic SolveEuler10()
        {
            List<int> primes = new List<int>() { 2 };

            primes.Add(2);

            for (int i = 3; i < 2000000; i += 2)
            {
                if (IntHelper.isPrime(i))
                {
                    primes.Add(i);
                }
            }

            long sum = 0;

            foreach (int prime in primes)
            {
                sum += prime;
            }

            return sum.ToString();
        }

        // In the 20×20 grid below, four numbers along a diagonal line have been marked in red.
        //08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
        //49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
        //81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
        //52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
        //22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
        //24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
        //32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
        //67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
        //24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
        //21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
        //78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
        //16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
        //86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
        //19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
        //04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
        //88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
        //04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
        //20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
        //20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
        //01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
        //The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
        //What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
        public static dynamic SolveEuler11()
        {
            int largestHorizontalProduct = 1;
            int largestVerticalProduct = 1;
            int largestBottomLeftToTopRightDiagonalProduct = 1;
            int largestTopToBottomDiagonalProduct = 1;

            // make the grid as a jagged array
            string gridString = Properties.Resources.euler11;
            gridString = gridString.Replace("\r\n", " ");

            string[] gridElements = gridString.Split(null);


            int[][] grid = new int[20][];

            for (int rowIndex = 0; rowIndex < 20; rowIndex++)
            {
                int[] gridRow = new int[20];

                for (int columnIndex = 0; columnIndex < 20; columnIndex++)
                {
                    int number = Convert.ToInt32(gridElements[rowIndex * 20 + columnIndex]);
                    gridRow[columnIndex] = number;
                }

                grid[rowIndex] = gridRow;
            }

            //then check largest products

            for (int row = 0; row < 20; row++)
            {
                for (int column = 0; column < 20 - 4; column++)
                {
                    var value = grid[row][column] * grid[row][column + 1] * grid[row][column + 2] * grid[row][column + 3];

                    if (value > largestHorizontalProduct)
                    {
                        largestHorizontalProduct = value;
                    }
                }
            }

            for (int row = 0; row < 20 - 4; row++)
            {
                for (int column = 0; column < 20; column++)
                {
                    var value = grid[row][column] * grid[row + 1][column] * grid[row + 2][column] * grid[row + 3][column];

                    if (value > largestVerticalProduct)
                    {
                        largestVerticalProduct = value;
                    }
                }
            }

            for (int row = 4; row < 20; row++)
            {
                for (int column = 0; column < 20 - 4; column++)
                {
                    var value = grid[row][column] * grid[row - 1][column + 1] * grid[row - 2][column + 2] * grid[row - 3][column + 3];

                    if (value > largestBottomLeftToTopRightDiagonalProduct)
                    {
                        largestBottomLeftToTopRightDiagonalProduct = value;
                    }
                }
            }

            for (int row = 0; row < 20 - 4; row++)
            {
                for (int column = 0; column < 20 - 4; column++)
                {
                    var value = grid[row][column] * grid[row + 1][column + 1] * grid[row + 2][column + 2] * grid[row + 3][column + 3];

                    if (value > largestTopToBottomDiagonalProduct)
                    {
                        largestTopToBottomDiagonalProduct = value;
                    }
                }
            }

            return (Math.Max(Math.Max(largestTopToBottomDiagonalProduct, largestBottomLeftToTopRightDiagonalProduct), Math.Max(largestHorizontalProduct, largestVerticalProduct))).ToString();
        }

        //The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
        //1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
        //Let us list the factors of the first seven triangle numbers:
        // 1: 1
        // 3: 1,3
        // 6: 1,2,3,6
        //10: 1,2,5,10
        //15: 1,3,5,15
        //21: 1,3,7,21
        //28: 1,2,4,7,14,28
        //We can see that 28 is the first triangle number to have over five divisors.
        //What is the value of the first triangle number to have over five hundred divisors?
        public static dynamic SolveEuler12()
        {
            bool triangleNumberFound = false;

            long i = 1;
            long triangleNumber = 1;

            string answer = "";

            while (!triangleNumberFound)
            {
                // test triangleNumber
                if (LongHelper.GetFactorCount(triangleNumber) > 500)
                {
                    triangleNumberFound = true;
                    answer = triangleNumber.ToString();
                    return answer;
                }
                else
                {
                    i++;
                    triangleNumber += i;
                }
            }

            return answer;
        }

        // Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
        public static dynamic SolveEuler13()
        {
            string euler13txt = Properties.Resources.euler13;
            euler13txt = euler13txt.Replace("\r\n", " ");
            string[] numberList = euler13txt.Split(' ');

            BigInteger count = new BigInteger(0);
            foreach (string bigNum in numberList)
            {
                BigInteger bigInt = BigInteger.Parse(bigNum);
                count = BigInteger.Add(count, bigInt);
            }

            return count.ToString().Substring(0, 10);
        }

        public static dynamic SolveEuler14()
        {
            long longestStartingNumber = 1;
            long longestCollatzSequence = 0;

            for (int i = 1; i <= 1000000; i++)
            {
                List<long> collatz = LongHelper.GenerateCollatzSequence(i);
                if (collatz.Count >= longestCollatzSequence)
                {
                    longestStartingNumber = i;
                    longestCollatzSequence = collatz.Count;
                }
            }

            return longestStartingNumber.ToString();
        }

        public static dynamic SolveEuler15()
        {
            List<int> allX = Enumerable.Range(0, 21).ToList();
            List<int> allY = Enumerable.Range(0, 21).ToList();
            Dictionary<string, long> coords = new Dictionary<string, long>();

            foreach (int x in allX)
            {
                foreach (int y in allY)
                {
                    coords.Add(x.ToString() + "x" + y.ToString(), 0);
                }
            }

            coords["0x0"] = 0;

            //    (0,0)---(1,0)---(2,0)---(3,0)   x
            //      |0      |1      |1     |1
            //      |       |       |      |
            //    (0,1)---(1,1)---(2,1)---(3,1)
            //      |1      |2      |3     | ....... etc.
            //      |       |       |      |
            //    (0,2)---(1,2)---(2,2)---(3,2)
            //      |       |       |      |
            //      |       |       |      |
            //    (0,3)---(1,3)---(2,3)---(3,3)
            //       
            //      y

            while (coords.Where(x => x.Value == 0).Count() > 1)
            {
                for (int x = 0; x <= 20; x++)
                {
                    for (int y = 0; y <= 20; y++)
                    {
                        string locale = x.ToString() + "x" + y.ToString();

                        if (locale == "0x0")
                        {
                            continue;
                        }

                        string westLocale = (x == 0 ? "none" : (x - 1).ToString() + "x" + y.ToString());
                        string northLocale = (y == 0 ? "none" : (x).ToString() + "x" + (y - 1).ToString());

                        if (westLocale == "none" || northLocale == "none")
                        {
                            coords[locale] = 1;
                        }
                        else
                        {
                            coords[locale] = coords[westLocale] + coords[northLocale];
                        }
                    }
                }
            }

            return coords["20x20"].ToString();
        }

        public static dynamic SolveEuler16()
        {
            long result = 0;

            BigInteger x = new BigInteger(2);
            BigInteger xPow = BigInteger.Pow(x, 1000);

            string xPowStr = xPow.ToString();

            for (int i = 0; i < xPowStr.Length; i++)
            {
                result += long.Parse(xPowStr[i].ToString());
            }

            return result.ToString();
        }

        public static dynamic SolveEuler17()
        {
            int result = 0;

            for (int i = 1; i <= 1000; i++)
            {
                result += StringHelper.NumberToWords(i).Replace(" ", "").Replace("-", "").Length;
            }

            return result.ToString();
        }

        public static dynamic SolveEuler18()
        {
            string triangleString = Properties.Resources.euler18;
            string[] triangleStringArray = triangleString.Replace("\r", "").Split('\n');

            List<List<int>> triangle = new List<List<int>>();

            foreach (string line in triangleStringArray)
            {
                string[] stringNumbers = line.Split(' ');

                List<int> row = new List<int>();

                foreach (string num in stringNumbers)
                {
                    row.Add(Convert.ToInt32(num));
                }

                triangle.Add(row);
            }

            for (int y = 14; y >= 0; y--)
            {
                for (int x = 0; x < triangle[y].Count - 1; x++)
                {
                    int max = Math.Max(triangle[y][x], triangle[y][x + 1]);
                    triangle[y - 1][x] += max;
                }
            }

            return triangle[0][0].ToString();
        }

        public static dynamic SolveEuler19()
        {
            DateTime start = new DateTime(1901, 1, 1);
            DateTime end = new DateTime(2000, 12, 31);

            int count = 0;

            do
            {
                if (start.Day == 1 && start.DayOfWeek == DayOfWeek.Sunday)
                {
                    count++;
                }
                start = start.AddMonths(1);
            }
            while (start < end);

            return count.ToString();
        }

        public static dynamic SolveEuler20()
        {
            BigInteger x = new BigInteger(1);

            for (int i = 1; i <= 100; i++)
            {
                x = BigInteger.Multiply(x, i);
            }

            string xStr = x.ToString();

            var result = 0;
            foreach (char c in xStr)
            {
                result += Int32.Parse(c.ToString());
            }

            return result.ToString();
        }

        /// <summary>
        /// Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
        /// If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.
        /// For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.
        /// Evaluate the sum of all the amicable numbers under 10000.
        /// </summary>
        public static dynamic SolveEuler21()
        {
            return IntHelper.getAmicableNumbersUnderN(10000).Sum().ToString();
        }

        public static dynamic SolveEuler22()
        {
            long sum = 0;

            string nameString = Properties.Resources.euler22;

            string[] nameArray = nameString.Split(',');

            for (int i = 0; i < nameArray.Length; i++)
            {
                nameArray[i] = nameArray[i].Replace("\\", "");
                nameArray[i] = nameArray[i].Replace("\"", "");
            }

            List<string> nameList = new List<string>();

            foreach (var name in nameArray)
            {
                nameList.Add(name);
            }

            nameList = nameList.OrderBy(m => m).ToList();

            List<int> scores = new List<int>();

            int index = 0;

            foreach (var name in nameList)
            {
                int scoreSum = 0;
                foreach (char t in name)
                    scoreSum += Convert.ToInt32(t) - 64;
                sum += scoreSum * (index + 1);
                index++;
            }

            return sum.ToString();
        }

        /// <summary>
        /// A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.
        /// A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum exceeds n.
        /// As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.
        /// Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.
        /// </summary>
        public static dynamic SolveEuler23()
        {
            List<int> abundantNumbers = new List<int>();

            for (int i = 1; i <= 28123; i++)
            {
                List<int> properDivisors = IntHelper.GetProperDivisors(i);

                int sumProperDivisors = properDivisors.Sum();
                if (sumProperDivisors > i)
                {
                    // then i is abundant
                    abundantNumbers.Add(i);
                }
            }

            HashSet<int> abundantSums = new HashSet<int>();

            for (int i = 0; i < abundantNumbers.Count; i++)
            {
                for (int j = 0; j < abundantNumbers.Count; j++)
                {
                    abundantSums.Add(abundantNumbers[i] + abundantNumbers[j]);
                }
            }

            List<int> integers = Enumerable.Range(1, 28123).ToList();

            foreach (var x in abundantSums)
            {
                integers.Remove(x);
            }

            return integers.Sum().ToString();
        }

        /// <summary>
        /// A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. 
        /// If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:
        /// 012   021   102   120   201   210
        /// What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?
        /// </summary>
        public static dynamic SolveEuler24()
        {
            List<string> permutations = new List<string>();
            string s = "0123456789";
            StringHelper.GenerateHeapPermutations(10, ref s, permutations);

            permutations.Sort();

            return permutations.ElementAt(999999);
        }

        public static dynamic SolveEuler25()
        {
            BigInteger a = new BigInteger(1);
            BigInteger b = new BigInteger(1);
            BigInteger c = new BigInteger();

            int count = 2;
            while (c.ToString().Length < 1000)
            {
                c = BigInteger.Add(a, b);
                a = b;
                b = c;
                count++;
            }

            return count.ToString();
        }

        // A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:
        //1/2	= 	0.5
        //1/3	= 	0.(3)
        //1/4	= 	0.25
        //1/5	= 	0.2
        //1/6	= 	0.1(6)
        //1/7	= 	0.(142857)
        //1/8	= 	0.125
        //1/9	= 	0.(1)
        //1/10	= 	0.1
        //Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle.It can be seen that 1/7 has a 6-digit recurring cycle.
        //Find the value of d< 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.
        public static dynamic SolveEuler26()
        {
            Dictionary<int, string> dictionary = new Dictionary<int, string>();

            for (int i = 1; i < 1000; i++)
            {
                string val = "0.";
                int divisor = 1;
                int dividend = i;

                while (val.Length <= 1000)
                {
                    if (dividend > divisor)
                    {
                        divisor *= 10;
                    }
                    else if (dividend == divisor)
                    {
                        break;
                    }
                    else
                    {
                        val += (int)divisor / dividend;
                        dividend = dividend % divisor;

                        if (dividend == 0)
                        {
                            break;
                        }
                    }
                }

                dictionary.Add(i, val);
            }

            return "";
        }

        public static dynamic SolveEuler32()
        {
            HashSet<int> pandigitalNumbers = new HashSet<int>();

            const int max = 987654321;

            for (int i = 1; i < 10000; i++)
            {
                for (int j = 1; j < 10000; j++)
                {
                    if (i * j > max)
                    {
                        break;
                    }
                    else
                    {
                        int product = i * j;
                        char[] multiplier_characters = i.ToString().ToCharArray();
                        char[] multiplicand_characters = j.ToString().ToCharArray();
                        char[] product_characters = product.ToString().ToCharArray();

                        char[] total_characters = multiplier_characters.Concat(multiplicand_characters.Concat(product_characters)).ToArray();

                        int totalCharacterCount = total_characters.Count();


                        if (totalCharacterCount > 9)
                        {
                            break;
                        }
                        else if (totalCharacterCount < 9)
                        {
                            continue;
                        }
                        else
                        {
                            if (ArrayHelper.IsOneThroughNinePandigital(total_characters))
                            {
                                pandigitalNumbers.Add(product);
                            }
                        }
                    }
                }
            }

            return pandigitalNumbers.Sum();
        }

        public static dynamic SolveEuler33()
        {
            List<decimal> curiousNumerators = new List<decimal>();
            List<decimal> curiousDenominators = new List<decimal>();

            for (int i = 10; i <= 98; i++)
            {
                for (int j = 11; j <= 99; j++)
                {
                    if (i >= j)
                    {
                        continue;
                    }
                    else
                    {

                        decimal firstFraction = decimal.Divide((decimal)i, (decimal)j);
                        decimal cancelledFraction;

                        // determine all ways to "cancel" digits
                        char[] iArray = i.ToString().ToCharArray();
                        char[] jArray = j.ToString().ToCharArray();
                        char[] intersection = iArray.Intersect(jArray).ToArray();

                        // assuming there are no valid curious fractions like ' 19/91 '
                        if (intersection.Count() == 1 && iArray.Distinct().Count() == 2 && jArray.Distinct().Count() == 2)
                        {
                            // assuming no curious fractions can be derived from numbers like '33/34'
                            char cancelledDigit = intersection.First();
                            decimal new_i = Decimal.Subtract((decimal)iArray.Where(x => x != cancelledDigit).Select(x => x).FirstOrDefault(), 48);
                            decimal new_j = Decimal.Subtract((decimal)jArray.Where(x => x != cancelledDigit).Select(x => x).FirstOrDefault(), 48);

                            if (new_i <= 0 || new_j <= 0)
                            {
                                continue;
                            }
                            else if (Decimal.Compare(new_j, 0) != 0)
                            {
                                cancelledFraction = decimal.Divide(new_i, new_j);

                                if (decimal.Compare(firstFraction, cancelledFraction) == 0
                                    && i % 10 != 0
                                    && j % 10 != 0)
                                {

                                    curiousNumerators.Add(i);
                                    curiousDenominators.Add(j);
                                }
                            }
                        }
                    }
                }
            }

            int answer_numerator = 1;
            int answer_denominator = 1;

            foreach (var d in curiousNumerators)
            {
                answer_numerator *= (int)d;
            }

            foreach (var d in curiousDenominators)
            {
                answer_denominator *= (int)d;
            }

            for (int i = 2; i < 10000; i++)
            {
                while (answer_numerator % i == 0 && answer_denominator % i == 0)
                {
                    answer_numerator /= i;
                    answer_denominator /= i;
                }
            }

            return answer_denominator;
        }

        public static dynamic SolveEuler34()
        {
            List<int> curiousNumbers = new List<int>();

            Dictionary<int, int> factorialDigits = new Dictionary<int, int>();
            factorialDigits.Add(0, 1);

            for (int i = 1; i < 10; i++)
            {
                int count = 1;

                foreach (var f in Enumerable.Range(1, i).ToList())
                {
                    count *= f;
                }

                factorialDigits.Add(i, count);
                //Console.WriteLine(i.ToString() + ":  " + count);
            }

            for (int i = 3; i < 2540160; i++)
            {
                int temp = i;

                List<int> digits = new List<int>();

                while (temp > 9)
                {
                    digits.Add(temp % 10);
                    temp /= 10;
                }

                digits.Add(temp);

                int count = 0;

                foreach (int d in digits)
                {
                    count += factorialDigits[d];
                    if (count > i) { break; }
                }

                if (count == i)
                {
                    curiousNumbers.Add(i);
                }

            }

            return curiousNumbers.Sum();
        }

        // The number 3797 has an interesting property. 
        // Being prime itself, it is possible to continuously remove digits from left to right, 
        //      and remain prime at each stage: 3797, 797, 97, and 7. Similarly we can work from right to left: 3797, 379, 37, and 3.
        // Find the sum of the only eleven primes that are both truncatable from left to right and right to left.
        // NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.
        public static dynamic SolveEuler37()
        {
            List<int> truncatablePrimes = new List<int>();

            HashSet<int> primes = IntHelper.getPrimeNumbersViaEratosthenesSieve(1000000);

            foreach (var prime in primes)
            {
                if (prime == 2 || prime == 3 || prime == 5 || prime == 7)
                {
                    continue;
                }

                List<int> rightToLeftTruncations = new List<int>();
                List<int> leftToRightTruncations = new List<int>();

                int temp_num = prime;
                int temp_num2 = prime;

                int temp_num_digit_count = 1;

                while (temp_num2 > 9)
                {
                    temp_num_digit_count += 1;
                    temp_num2 /= 10;
                }

                for (int k = 1; k < temp_num_digit_count; k++)
                {
                    rightToLeftTruncations.Add(temp_num % (int)Math.Pow(10, k));
                }

                for (int i = 1; i <= rightToLeftTruncations.Count; i++)
                {
                    leftToRightTruncations.Add((prime - rightToLeftTruncations.ElementAt(i - 1)) / (int)Math.Pow(10, i));
                }

                List<int> truncations = new List<int>();
                truncations.AddRange(rightToLeftTruncations.Concat(leftToRightTruncations).ToList());

                if (truncations.All(x => primes.Contains(x)))
                {
                    truncatablePrimes.Add(prime);
                }

                if (truncatablePrimes.Count >= 11)
                {
                    break;
                }
            }

            return truncatablePrimes.Sum();
        }

        //  Take the number 192 and multiply it by each of 1, 2, and 3:
        //      192 × 1 = 192
        //      192 × 2 = 384
        //      192 × 3 = 576
        //  By concatenating each product we get the 1 to 9 pandigital, 192384576. We will call 192384576 the concatenated product of 192 and (1,2,3)
        //  The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is the concatenated product of 9 and (1,2,3,4,5).
        //  What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated product of an integer with (1,2, ... , n) where n > 1?
        public static dynamic SolveEuler38()
        {
            List<string> pandigitalStrings = new List<string>();
            HashSet<long> pandigitalNumbers = new HashSet<long>();

            string s = "123456789";
            StringHelper.GenerateHeapPermutations(9, ref s, pandigitalStrings);
            pandigitalStrings.ForEach(x => pandigitalNumbers.Add(long.Parse(x)));

            int max_n = 5;
            int multiplier = 9;
            bool highestMultiplierProbablyFound = false;
            long biggestProduct = 0;

            while (!highestMultiplierProbablyFound)
            {
                if (!multiplier.ToString().StartsWith("9"))
                {
                    multiplier++;
                    continue;
                }
                else
                {
                    for (int i = 1; i <= max_n; i++)
                    {
                        int[] multiplicands = Enumerable.Range(1, i).ToArray();
                        string product = "";

                        foreach (var m in multiplicands)
                        {
                            product += (multiplier * m).ToString();
                        }

                        int productLength = product.Length;

                        if (multiplier > 90000 && productLength > 9)
                        {
                            highestMultiplierProbablyFound = true;
                            break;
                        }
                        else if (productLength > 9)
                        {
                            continue;
                        }
                        else
                        {
                            if (ArrayHelper.IsOneThroughNinePandigital(product.ToCharArray()))
                            {
                                long newProduct = long.Parse(product);

                                if (biggestProduct < newProduct)
                                {
                                    biggestProduct = newProduct;
                                }
                            }
                        }
                    }

                    multiplier++;
                }
            }

            return biggestProduct;
        }

        public static dynamic SolveEuler42()
        {
            Dictionary<string, int> words = new Dictionary<string, int>();

            string[] wordStrings = Properties.Resources.euler42.Split(',');

            for (int i = 0; i < wordStrings.Length; i++)
            {
                wordStrings[i] = wordStrings[i].Replace("\"", "");
            }

            List<int> wordValues = new List<int>();

            for (int i = 0; i < wordStrings.Length; i++)
            {
                var wordCharArray = wordStrings[i].ToCharArray();
                int totalValue = 0;

                foreach (var c in wordCharArray)
                {
                    totalValue += (int)c - 64;
                }

                words.Add(wordStrings[i], totalValue);
            }

            List<int> triangleNumbers = new List<int>();

            for (int i = 0; i < 100000; i++)
            {
                triangleNumbers.Add(IntHelper.GetTriangleNumberByIndex(i));
            }

            int count = 0;

            foreach (var word in words)
            {
                if (triangleNumbers.Contains(word.Value))
                {
                    count++;
                }
            }

            return count;
        }

        public static dynamic SolveEuler43()
        {
            List<string> list = new List<string>();

            string s = "0123456789";
            StringHelper.GenerateHeapPermutations(s.Length, ref s, list);

            list.RemoveAll(x => x.StartsWith("0"));

            list.RemoveAll(
                x => Int32.Parse(new string(new char[3] { x[1], x[2], x[3] })) % 2 != 0);

            list.RemoveAll(
                x => Int32.Parse(new string(new char[3] { x[2], x[3], x[4] })) % 3 != 0);

            list.RemoveAll(
                x => Int32.Parse(new string(new char[3] { x[3], x[4], x[5] })) % 5 != 0);

            list.RemoveAll(
                x => Int32.Parse(new string(new char[3] { x[4], x[5], x[6] })) % 7 != 0);

            list.RemoveAll(
                x => Int32.Parse(new string(new char[3] { x[5], x[6], x[7] })) % 11 != 0);

            list.RemoveAll(
                x => Int32.Parse(new string(new char[3] { x[6], x[7], x[8] })) % 13 != 0);

            list.RemoveAll(
                x => Int32.Parse(new string(new char[3] { x[7], x[8], x[9] })) % 17 != 0);

            long answer = 0;

            foreach (var x in list)
            {
                answer += long.Parse(x);
            }

            return answer;
        }

        public static dynamic SolveEuler49()
        {
            List<long> primesBelowTenThousand = LongHelper.getPrimeNumbersTo(10000);
            primesBelowTenThousand.RemoveAll(n => n < 1000 || n > 10000);

            List<long> primeSequences = new List<long>();
            long first, next, expectedNext, distance;

            for (int i = 0; i < primesBelowTenThousand.Count; i++)
            {
                for (int j = 0; j < primesBelowTenThousand.Count; j++)
                {
                    if (i >= j)
                    {
                        continue;
                    }
                    else
                    {
                        first = primesBelowTenThousand.ElementAt(i);

                        next = primesBelowTenThousand.ElementAt(j);

                        distance = next - first;
                        expectedNext = next + distance;

                        if (expectedNext > 10000)
                        {
                            break;
                        }
                        else if (primesBelowTenThousand.Contains(expectedNext))
                        {
                            char[] firstCharArray = first.ToString().ToCharArray();
                            char[] nextCharArray = next.ToString().ToCharArray();

                            if (firstCharArray.Any(x => !nextCharArray.Contains(x)))
                            {
                                continue;
                            }
                            else
                            {
                                if (StringHelper.ArePermutations(first.ToString(), next.ToString()))
                                {
                                    char[] expectedNextCharArray = expectedNext.ToString().ToCharArray();

                                    if (nextCharArray.Any(x => !expectedNextCharArray.Contains(x)))
                                    {
                                        continue;
                                    }
                                    else
                                    {
                                        if (StringHelper.ArePermutations(next.ToString(), expectedNext.ToString()))
                                        {
                                            primeSequences.Add(first); primeSequences.Add(next); primeSequences.Add(expectedNext);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            primeSequences.Remove(1487);
            primeSequences.Remove(4817);
            primeSequences.Remove(8147);

            return primeSequences[0].ToString() + primeSequences[1].ToString() + primeSequences[2].ToString();
        }

        public static dynamic SolveEuler52()
        {
            bool keepGoing = true;
            long i = 10;

            while (keepGoing)
            {
                if (StringHelper.ArePermutations(i.ToString(), (i * 2).ToString())
                    && StringHelper.ArePermutations(i.ToString(), (i * 3).ToString())
                    && StringHelper.ArePermutations(i.ToString(), (i * 4).ToString())
                    && StringHelper.ArePermutations(i.ToString(), (i * 5).ToString())
                    && StringHelper.ArePermutations(i.ToString(), (i * 6).ToString()))
                {
                    return i.ToString();
                }

                i++;
            }

            return i.ToString();
        }

        public static dynamic SolveEuler54()
        {
            string[] cArray = Properties.Resources.euler54.Replace("\n", " ").Split(' ');
            cArray = cArray.Take(10000).ToArray();

            List<Card> cards = new List<Card>();
            foreach (var card in cArray)
            {
                Card c = new Card(card[0], card[1]) { };
                cards.Add(c);
            }

            List<Hand> hands = new List<Hand>();
            for (int i = 0; i < cards.Count; i += 5)
            {
                Hand hand = new Hand() { };
                hand.Cards.AddRange(cards.GetRange(i, 5));

                hand = CardHelper.DetermineHandStrength(hand);
                hands.Add(hand);
            }

            int player1wins = 0;
            int player2wins = 0;

            for (int i = 0; i < hands.Count; i += 2)
            {
                string winner = CardHelper.DetermineStrongerHand(hands[i], hands[i + 1]);

                if (winner == "Player 1")
                {
                    player1wins++;
                }
                else if (winner == "Player 2")
                {
                    player2wins++;
                }
            }

            return player1wins;
        }

        public static dynamic SolveEuler67()
        {
            string triangleString = Properties.Resources.euler67;
            string[] triangleStringArray = triangleString.Replace("\r", "").Split('\n');

            List<List<int>> triangle = new List<List<int>>();

            foreach (string line in triangleStringArray)
            {
                string[] stringNumbers = line.Split(' ');

                List<int> row = new List<int>();

                foreach (string num in stringNumbers)
                {
                    row.Add(Convert.ToInt32(num));
                }

                triangle.Add(row);
            }

            for (int y = 99; y >= 0; y--)
            {
                for (int x = 0; x < triangle[y].Count - 1; x++)
                {
                    int max = Math.Max(triangle[y][x], triangle[y][x + 1]);
                    triangle[y - 1][x] += max;
                }
            }

            return triangle[0][0].ToString();
        }

        public static dynamic SolveEuler112()
        {
            int count = 1;
            int bouncyNumbersFound = 0;
            decimal percentage = Decimal.Zero;
            while (!(Decimal.Compare(percentage, Decimal.Divide(99, 100)) == 0))
            {
                count++;
                bool isBouncy = IntHelper.isBouncy(count);

                if (isBouncy)
                {
                    bouncyNumbersFound++;
                }

                percentage = Decimal.Divide(bouncyNumbersFound, count);
            }

            return count;
        }

        public static void CopyAnswerToClipboard(dynamic answer)
        {
            Thread thread = new Thread(() => Clipboard.SetText(answer.ToString()));
            thread.SetApartmentState(ApartmentState.STA); //Set the thread to STA
            thread.Start();
            thread.Join();
        }
    }
}