package main

import (
	"fmt"
	"reflect"
)

// ProjectEulerSolutions ... Solves Project Euler problems.
type ProjectEulerSolutions struct{}

// Problem1 : If we list all the natural numbers below 10 that are multiple of 3 or 5, we get 3, 5, 6, and 9.
// The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.
func (s ProjectEulerSolutions) Problem1() {

	var multiples []int

	for i := 1; i <= 1000; i++ {
		if i%3 == 0 || i%5 == 0 {
			multiples = append(multiples, i)
		}
	}

	sum := 0

	for _, i := range multiples {
		sum += i
	}

	fmt.Println(sum)
}

// Problem2 : Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
func (s ProjectEulerSolutions) Problem2() {

	f := []int{1, 2}

	for f[len(f)-1] <= 4000000 {
		f = append(f, f[len(f)-1]+f[len(f)-2])
	}

	sum := 0

	for _, i := range f {
		if i%2 == 0 {
			sum += i
		}
	}

	fmt.Println(sum)
}

// Problem3 : The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600 851 475 143 ?
func (s ProjectEulerSolutions) Problem3() {
	// var primeFactors []int
	var oddFactors []int

	number := 600851475143
	numberDividedByTwo := number / 2

	for i := 3; i <= numberDividedByTwo; i += 2 {
		if number%i == 0 {
			oddFactors = append(oddFactors, i)
		}
	}

	fmt.Println(oddFactors)
}

// Solve : Solves specified Project Euler problems.
func (s ProjectEulerSolutions) Solve(problems []int) {
	val := reflect.ValueOf(s)

	for _, p := range problems {
		methodName := fmt.Sprintf("Problem%d", p)
		fmt.Printf("Solving Problem #%d ... ", p)
		val.MethodByName(methodName).Call(nil)
	}
}

func main() {
	euler := ProjectEulerSolutions{}
	euler.Solve([]int{3})
}
